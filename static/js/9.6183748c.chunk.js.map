{"version":3,"sources":["views/Register-form/index.tsx"],"names":["RegisterForm","useState","userName","email","phoneNumber","userRegister","setUserRegister","phoneInit","setPhoneInit","error","setError","InputUserRef","useRef","InputUserPhone","InputUserPhone2","changeDataUser","inputForm","name","value","Number","useEffect","current","validity","patternMismatch","setCustomValidity","rangeUnderflow","rangeOverflow","checkInput","className","onSubmit","e","form","preventDefault","bodyFormData","FormData","set","axios","method","url","data","headers","then","response","status","alert","catch","handleSubmit","htmlFor","type","id","placeholder","ref","pattern","required","onChange","target","min","max"],"mappings":"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","file":"static/js/9.6183748c.chunk.js","sourcesContent":["//Se importan las librerias necesarias\nimport React, { useRef, useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport \"./style.css\";\n\n//funcion para la vista del formulario de registro\nfunction RegisterForm() {\n  const [userRegister, setUserRegister] = useState<IUser>({\n    userName: \"\",\n    email: \"\",\n    phoneNumber: 0\n  });\n  const [phoneInit, setPhoneInit] = useState<number>(300);\n  const [error, setError] = useState<string>('');\n\n  const InputUserRef = useRef<HTMLInputElement>(null);\n  const InputUserPhone = useRef<HTMLInputElement>(null);\n  const InputUserPhone2 = useRef<HTMLInputElement>(null);\n\n  /* Funcion para cambiar los datos del usuario cada vez que hay un cambio en el input\n     las variables de entrada es in HTMLInputElement\n  */\n  function changeDataUser(inputForm: HTMLInputElement) {\n    if (inputForm.name === \"userName\") {\n      setUserRegister({\n        ...userRegister,\n        userName: inputForm.value\n      });\n    } else if (inputForm.name === \"email\") {\n      setUserRegister({\n        ...userRegister,\n        email: inputForm.value\n      });\n    } else {\n      setUserRegister({\n        ...userRegister,\n        phoneNumber: Number(inputForm.value)\n      });\n    }\n  }\n\n  /* Funcion, para detectar los errores en la inserci√≥n de datos en el formulario */\n  function checkInput() {\n    //deteccion de error en el input de Username\n    if (InputUserRef.current?.validity.patternMismatch) {\n      InputUserRef.current.setCustomValidity(\n        \"El nombre de usuario debe tener al menos 4 caracteres y maximo 20 caracteres, sin espacios. \"\n      );\n    } else {\n      InputUserRef.current?.setCustomValidity(\"\");\n    }\n    //deteccion de error en el input de phone\n    if (\n      InputUserPhone.current?.validity.rangeUnderflow ||\n      InputUserPhone.current?.validity.rangeOverflow\n    ) {\n      InputUserPhone.current.setCustomValidity(\n        \"El telefono del usuario debe tener al menos un numero entre 300 y 320 \"\n      );\n    } else {\n      InputUserPhone.current?.setCustomValidity(\"\");\n    }\n    //deteccion de error en el input de phone2\n    if (\n      InputUserPhone2.current?.validity.rangeUnderflow ||\n      InputUserPhone2.current?.validity.rangeOverflow\n    ) {\n      InputUserPhone2.current.setCustomValidity(\n        \"El telefono del usuario debe tener debe tener 7 caracteres numericos\"\n      );\n    } else {\n      InputUserPhone2.current?.setCustomValidity(\"\");\n    }\n  }\n\n/* funcion para enviar los datos del formulario */\n  function handleSubmit(form: React.FormEvent<HTMLFormElement>) {\n    form.preventDefault();\n    //creacion del formData que se enviara\n    let bodyFormData = new FormData();\n    bodyFormData.set(\"userName\", userRegister.userName);\n    bodyFormData.set(\"email\", `${userRegister.phoneNumber}`);\n    bodyFormData.set(\n      \"phone_number\",\n      `${phoneInit}${userRegister.phoneNumber}`\n    );\n    //envio de datos mediante axios, configurando el formData\n    axios({\n      method: \"post\",\n      url: \"http://sgaviria.com/api/1/front-dev/\",\n      data: bodyFormData,\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n        \"Tranqui-FrontendDeveloper\": \"RODRIGOESCOBARLOPEZ\"\n      }\n    })\n      .then(function (response) {\n        if (response.status === 200) {\n          alert(\"Los datos del formulario se han enviado satisfactoriamente\")\n        }\n      })\n      .catch(function (response) {\n        setError('Ha ocurrido un error al enviar los datos del formulario')\n      });\n  }\n\n  useEffect(() => {\n    checkInput();\n  }, [userRegister, phoneInit]);\n  return (\n    <div className=\"container-form\">\n      <h1 className=\"form-title\">Formulario de Registro</h1>\n      <form\n        className=\"form-register\"\n        onSubmit={e => {\n          handleSubmit(e);\n        }}\n      >\n        <label className=\"label-group\" htmlFor=\"completeName\">\n          <span>Nombre de usuario</span>\n          <input\n            className=\"input-form\"\n            type=\"text\"\n            name=\"userName\"\n            id=\"completeUserName\"\n            placeholder=\"ocralo\"\n            ref={InputUserRef}\n            pattern=\"[^\\s]{4,20}\"\n            required\n            onChange={e => {\n              changeDataUser(e.target);\n            }}\n          />\n        </label>\n        <label className=\"label-group\" htmlFor=\"phone\">\n          <span>Telefono celular</span>\n          <div>\n            <input\n              className=\"input-form\"\n              type=\"number\"\n              name=\"phoneNumber\"\n              id=\"phone\"\n              placeholder=\"300\"\n              pattern=\"[^\\s]{4,20}\"\n              value={phoneInit}\n              min=\"300\"\n              max=\"320\"\n              ref={InputUserPhone}\n              required\n              onChange={e => {\n                setPhoneInit(Number(e.target.value));\n              }}\n            />\n            <input\n              className=\"input-form\"\n              type=\"number\"\n              name=\"phoneNumber2\"\n              id=\"phone2\"\n              min=\"1000000\"\n              max=\"9999999\"\n              value={userRegister.phoneNumber}\n              ref={InputUserPhone2}\n              required\n              onChange={e => {\n                changeDataUser(e.target);\n              }}\n            />\n          </div>\n        </label>\n        <label className=\"label-group\" htmlFor=\"mail\">\n          <span>Correo electronico</span>\n          <input\n            className=\"input-form\"\n            type=\"email\"\n            name=\"email\"\n            id=\"email\"\n            placeholder=\"correo@mail.com\"\n            required\n            onChange={e => {\n              changeDataUser(e.target);\n            }}\n          />\n        </label>\n        <button className=\"button-submit\" type=\"submit\">\n          ENVIAR DATOS\n        </button>\n      </form>\n      <h4 className=\"error\">{error}</h4>\n    </div>\n  );\n}\n\ninterface IUser {\n  userName: string;\n  email: string;\n  phoneNumber: number;\n}\n\n//Se exporta el componente\nexport default RegisterForm;\n"],"sourceRoot":""}